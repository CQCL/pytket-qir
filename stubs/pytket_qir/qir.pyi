import os
from _typeshed import Incomplete
from pyqir.generator.types import Qubit as Qubit, Result as Result
from pyqir.parser import QirBlock as QirBlock, QirInstr as QirInstr
from pyqir.parser._native import PyQirInstruction as PyQirInstruction
from pytket import Bit as Bit, Circuit, OpType
from pytket.circuit import Op
from pytket_qir.gatesets.base import CustomGateSet as CustomGateSet, GateSet as GateSet, OpName as OpName, OpNat as OpNat, OpSpec as OpSpec, QirGate as QirGate
from pytket_qir.gatesets.pyqir.pyqir import PYQIR_GATES as PYQIR_GATES
from typing import Dict, List, Optional, Union

classical_ops: Dict

class QirParser:
    module: Incomplete
    gateset: Incomplete
    qubits: Incomplete
    bits: Incomplete
    circuit: Incomplete
    def __init__(self, file_path: str, gateset: Optional[CustomGateSet]) -> None: ...
    def get_required_qubits(self) -> int: ...
    def get_required_results(self) -> int: ...
    def get_optype(self, instr: PyQirInstruction) -> OpType: ...
    def get_params(self, instr: PyQirInstruction) -> List[float]: ...
    def get_operation(self, instr: QirInstr) -> Op: ...
    def get_qubit_indices(self, instr: PyQirInstruction) -> List[int]: ...
    def add_classical_op(self, classical_op: str, instr: PyQirInstruction, circuit: Circuit, c_reg_map: Dict) -> None: ...
    def block_to_circuit(self, block: QirBlock, circuit: Circuit) -> Circuit: ...

def circuit_from_qir(input_file: Union[str, os.PathLike], gateset: Optional[CustomGateSet] = ...) -> Circuit: ...

class QIRUnsupportedError(Exception): ...

class Module:
    module: Incomplete
    builder: Incomplete
    qis: Incomplete
    gateset: Incomplete
    default_gateset: Incomplete
    def __init__(self, name: str, num_qubits: int, num_results: int, gateset: Optional[CustomGateSet] = ...) -> None: ...

def circuit_to_module(circ: Circuit, module: Module) -> Module: ...
def write_qir_file(circ: Circuit, output_file: str, gateset: Optional[CustomGateSet] = ...) -> None: ...
def circuit_to_qir_bytes(circ: Circuit, gateset: Optional[CustomGateSet] = ...) -> bytes: ...
